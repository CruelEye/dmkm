datatable(data_na)
str(data)
atribut<-c(4,5,6,7,9,20,25)
data<-data[,atribut]
#histogram sumber dana
data %>% group_by(sumber_dana,tahun_anggaran) %>% summarise(banyak=n()) %>% arrange(desc(banyak)) %>% ggplot(aes(x=sumber_dana, y=banyak/sum(banyak), fill=factor(tahun_anggaran)))+geom_col()+xlab("sumber dana")+ylab("banyak")+labs(fill="tahun anggaran")
#3 besar sumber dana terbesar
data_dana=data %>% group_by(sumber_dana) %>% summarize(banyak=n()) %>% arrange(desc(banyak)) %>% mutate(proporsi=round(100*banyak/sum(banyak),2)) %>% top_n(3)
data_dana$No=c(1:nrow(data_dana))
datatable(data_dana)
#box plot antarkategori
data %>% ggplot(aes(x=kategori,y=hasil_lelang))+geom_boxplot()+ylab("hasil lelang")
#box plot antarkategori setelah nilai hasil lelang ditransforimasi dengan fungsi log
data %>% ggplot(aes(x=kategori,y=log(hasil_lelang),fill=kategori))+geom_boxplot()+ylab("hasil lelang setelah transformasi")
#box plot kategori pengadaan barang
data %>% filter(kategori=="Pengadaan Barang") %>% ggplot(aes(x=kategori,y=log(hasil_lelang)))+geom_boxplot(fill="light yellow")+ylab("hasil setelah ditransformasi")
#5 besar hasil lelang dari pengadaan barang
data_pengadaan=data %>% filter(kategori=="Pengadaan Barang") %>% select(sumber_dana, nama_satker,hasil_lelang)%>% arrange(desc(hasil_lelang)) %>% top_n(5,hasil_lelang)
datatable(data_pengadaan)
#tabel hasil lelang termahal kategori pengadaan barang
top_data_pengadaan=data %>% filter(kategori=="Pengadaan Barang") %>% filter(hasil_lelang==max(hasil_lelang))%>% select(sumber_dana, nama_satker,hasil_lelang)
datatable(top_data_pengadaan)
#total pengadaan tertinggi
data_satker_tahun=data %>% group_by(nama_satker, tahun_anggaran) %>% summarise(total_pengadaan=sum(hasil_lelang)/10^9) %>% arrange(desc(total_pengadaan))
#6 besar total pengadaan tertinggi
data_satker_tahun10=data %>% group_by(nama_satker, tahun_anggaran) %>% summarise(total_pengadaan=sum(hasil_lelang)/10^9) %>% arrange(desc(total_pengadaan)) %>% head()
datatable(data_satker_tahun10)
data_satker_12=data %>% group_by(nama_satker) %>% summarise(total_pengadaan=sum(hasil_lelang)/10^9) %>% arrange(desc(total_pengadaan)) %>% top_n(12,total_pengadaan) %>% .$nama_satker %>% as.character()
#barplot 12 besar total pengadaan tertinggi per satker antar tahun
data_satker_tahun %>% filter(nama_satker %in% data_satker_12) %>%  ggplot(aes(x=factor(tahun_anggaran),y=total_pengadaan))+geom_col(fill="light blue")+facet_wrap(~nama_satker,scales = "free_y")+labs(x="total pengadaan", y="tahun anggaran")
# scatterplot hasil pengadaan dan peserta lelang
data %>% ggplot(aes(y=log(hasil_lelang),x=jumlah_peserta,col=kategori))+geom_point()+geom_smooth()+labs(x="banyak peserta",y="log hasil lelang")
# load data
data <- read.csv('tender-jawatengah-2017-2018.csv', sep=';')
View(data)
#importing library
#untuk pengolahan variabel dan plot
library(tidyverse)
#untuk tabulasi
library(data.table)
library(DT)
str(data)
atribut<-c(4,5,6,7,9,20,25)
data<-data[,atribut]
#histogram sumber dana
data %>% group_by(sumber_dana,tahun_anggaran) %>% summarise(banyak=n()) %>% arrange(desc(banyak)) %>% ggplot(aes(x=sumber_dana, y=banyak/sum(banyak), fill=factor(tahun_anggaran)))+geom_col()+xlab("sumber dana")+ylab("banyak")+labs(fill="tahun anggaran")
#3 besar sumber dana terbesar
data_dana=data %>% group_by(sumber_dana) %>% summarize(banyak=n()) %>% arrange(desc(banyak)) %>% mutate(proporsi=round(100*banyak/sum(banyak),2)) %>% top_n(3)
data_dana$No=c(1:nrow(data_dana))
datatable(data_dana)
?matrix
?sample
??smple
??sample
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
data<-read.csv(file.choose(),header = T)
view(data)
library(ggplot2)
library(tidyverse)
data<-read.csv(file.choose(),header = T,sep = ";")
view(data)
str(data)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar()
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
data[1,17]
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(data[,c(2,17)],beside = T)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(data[,2],beside = T)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(table(data$job,data$y),col=c("#a84a32","#b0bf28"),beside = T)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(table(data$y,data$job),col=c("#a84a32","#b0bf28"),beside = T)
class(data)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(table(data$y,data$job),col=c("#a84a32","#b0bf28"),beside = T, legend=data$y)
ggplot(data, aes(x=job,fill=as.factor(y)))+geom_bar(position = "dodge")
barplot(table(data$y,data$job),col=c("#a84a32","#b0bf28"),beside = T, legend=levels(data$y))
levels(data$y)
levels(data)
x<-c("y","y","a")
levels(x)
?levels
install.packages("gapminder")
?gapminder
??gapminder
install.packages("gganimate")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(ggplot2)
library(gganimate)
view(gapminder)
gapminder
view(gapminder)
View(gapminder)
class(gapminder)
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size=pop, color=continent)) + geom_point()
library(gapminder)
library(dplyr)
library(ggplot2)
library(gganimate)
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size=pop, color=continent)) + geom_point()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, color=continent)) + geom_point()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size=pop, color=continent)) + geom_point()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='year:{frame_time}',x='GDP per Capita',y='life expectancy')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='year:{frame_time}',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='Year:{frame_time}',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='uwaw',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='uwaw',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
anim_save("271-ggplot2-animated-gif-chart-with-gganimate1.gif")
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate2.gif")
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='uwaw',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
animate(myPlot, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='uwaw',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
animate(plot, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
install.packages("gifski")
library(gapminder)
library(dplyr)
library(ggplot2)
library(gganimate)
library(gifski)
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='uwaw',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
animate(plot, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
anim_save("output.gif")
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(title='Year: {frame_time}',x='GDP per Capita',y='life expectancy') +ease_aes('linear')
animate(plot, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
anim_save("output.gif")
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')+transition_time(year)  +ease_aes('linear')
animate(plot, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
anim_save("output.gif")
View(Groceries)
?ease_aes
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate2.gif")
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')+transition_time(year)  +ease_aes('linear')
animate(plot, duration = 10, fps = 60, width = 1000, height = 1000, renderer = gifski_renderer())
anim_save("output.gif")
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = 10*pop, color=continent)) + geom_point()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = 10*pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')
gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')
plot<-gapminder %>% ggplot(aes(x=gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() +scale_x_log10()+theme_bw()+labs(x='GDP per Capita',y='life expectancy')+transition_time(year)  +ease_aes('linear')
animate(plot, duration = 10, fps = 60, width = 500, height = 500, renderer = gifski_renderer())
anim_save("output.gif")
x<-LETTERS[1:24]
c
x
y<-paste("var",seq(1,20))
y
?runif
runif(400,0,5)
datadummy<-expand.grid(X=x,Y=y,Z=runif(400,0,5))
ggplot(datadummy,aes(X,Y,fill=Z))+geom_tile()
datadummy<-expand.grid(X=x,Y=y)
datadummy$Z = runif(400,0,5)
rm(datadummy)
datadummy<-expand.grid(X=LETTERS[1:20],Y=y)
datadummy$Z=runif(400,0,5)
ggplot(datadummy,aes(x=X,y=Y,fill=Z))+geom_tile()
y=paste("var",seq(1:20))
datadummy<-expand.grid(X=LETTERS[1:20],Y=y)
z=runif(400,0,5)
datadummy$Z=ggplot(datadummy,aes(x=X,y=Y,fill=Z))+geom_tile()
y=paste("var",seq(1:20))
datadummy<-expand.grid(X=LETTERS[1:20],Y=y)
z=runif(400,0,5)
datadummy$Z=z
ggplot(datadummy,aes(x=X,y=Y,fill=Z))+geom_tile()
#heatmap
y=paste("var",seq(1:20))
datadummy<-expand.grid(X=LETTERS[1:20],Y=y)
z=runif(400,0,5)
datadummy$Z=z
ggplot(datadummy,aes(x=X,y=Y,fill=Z))+geom_tile()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
datapert6<-read_excel(file.choose())
datapert6_2<-read_excel(file.choose(),sheet = "Sheet2")
#soal 2
library(ggplot2)
library(dplyr)
modelreg2<-lm(y~x,data=datapert6_2)
coefficients(modelreg2)
plot(modelreg2)
datapert6_2 %>% ggplot(aes(x,y))+geom_point()+geom_smooth()
boxplot(modelreg2$residuals)
#soal 2
library(ggplot2)
library(dplyr)
modelreg2<-lm(y~x,data=datapert6_2)
coefficients(modelreg2)
cor(datapert6_2$x,datapert6_2$y)
plot(modelreg2)
datapert6_2 %>% ggplot(aes(x,y))+geom_point()+geom_smooth()
boxplot(modelreg2$residuals)
#soal 2
library(ggplot2)
library(dplyr)
modelreg2<-lm(y~x,data=datapert6_2)
coefficients(modelreg2)
cor(datapert6_2$x,datapert6_2$y)
plot(modelreg2)
datapert6_2 %>% ggplot(aes(x,y))+geom_point()+geom_smooth()
boxplot(modelreg2$residuals)
soal2b<-12.0623211+0.7771416*85
#soal 2
library(ggplot2)
library(dplyr)
modelreg2<-lm(y~x,data=datapert6_2)
coefficients(modelreg2)
cor(datapert6_2$x,datapert6_2$y)
plot(modelreg2)
datapert6_2 %>% ggplot(aes(x,y))+geom_point()+geom_smooth()
boxplot(modelreg2$residuals)
soal2b<-12.0623211+0.7771416*85
soal2b
#soal 2
library(ggplot2)
library(dplyr)
modelreg2<-lm(y~x,data=datapert6_2)
coefficients(modelreg2)
cor(datapert6_2$x,datapert6_2$y)
plot(modelreg2)
datapert6_2 %>% ggplot(aes(x,y))+geom_point()+geom_smooth()
boxplot(modelreg2$residuals)
plot(datapert6_2$x,datapert6_2$y)
abline(modelreg2)
soal2b<-12.0623211+0.7771416*85
soal2b
Pref <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/komstat/pertemuan 6/Pref.csv", sep="")
View(Pref)
knitr::opts_chunk$set(echo = TRUE)
Pref <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/komstat/pertemuan 6/Pref.csv", sep="")
View(Pref)
library(randtests)
x<-(Pref$Pref)
runs.test(x, threshold = mean(x))
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(tidyverse)
library(dplyr)
setwd("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes")
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
View(car)
#import library
library(naivebayes)
library(tidyverse)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
View(car)
str(car)
str(car)
#ubah tipe variabel menjadi tipe faktor
car<-as.factor(car)
str(car)
#ubah tipe variabel menjadi tipe faktor
car<-as.factor(car)
str(car)
#import library
library(naivebayes)
library(tidyverse)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
View(car)
#import library
library(naivebayes)
library(tidyverse)
library(psych)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
str(car)
#ubah tipe variabel menjadi tipe faktor
str(data("iris"))
data("iris")
iris
str(iris)
colnames(car)
typeof(colnames(car))
typeof(names(car))
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[i]=as.factor(car[i])
}
str(car)
#import library
library(naivebayes)
library(tidyverse)
library(psych)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
car$V1
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
pairs.panels(car)
#import library
library(naivebayes)
library(tidyverse)
library(psych)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
#import library
library(naivebayes)
library(tidyverse)
library(psych)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
pairs.panels(car)
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=car)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=car)
modelnaiv
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=car)
modelnaiv
summary(modelnaiv)
str(car)
colSums(is.na(car))
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
str(car)
colSums(is.na(car))
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
view(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
str(car)
is.na(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
view(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
colSums(is.na(car))
str(car)
view(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=trainingdat)
modelnaiv
summary(modelnaiv)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~V1+V2+V3+V4+V5+V6,data=trainingdat)
modelnaiv
summary(modelnaiv)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=trainingdat)
modelnaiv
summary(modelnaiv)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=trainingdat)
modelnaiv
summary(modelnaiv)
plot(modelnaiv)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=trainingdat)
modelnaiv
summary(modelnaiv)
install.packages("caret")
#import library
library(naivebayes)
library(tidyverse)
library(psych)
library(caret)
#import data, path menyesuaikan
car <- read.csv("~/Politeknik Statistika STIS/materi kuliah/semester 5/data Mining/naive bayes/car.txt", header=FALSE)
str(car)
#ubah tipe variabel menjadi tipe faktor
for(i in names(car)){
car[,i]=as.factor(car[,i])
}
str(car)
view(car)
#melihat korelasi dari tiap variabel, kalau ada korelasi yang tinggi, hilangkan salah satu variabel
pairs.panels(car)
#memecah data menjadi data training(80% dari data awal) dan data test (20% dari data awal)
set.seed(1234)
sampel<-sample(2,nrow(car),replace = T, prob = c(0.8,0.2))
trainingdat<-car[sampel==1, ]
testingdat<-car[sampel==2, ]
#membuat model
modelnaiv<-naive_bayes(V7~.,data=trainingdat)
modelnaiv
summary(modelnaiv)
#prediksi menggunakan data testing
prediksi<-predict(modelnaiv, testingdat)
#prediksi menggunakan data testing
prediksi<-predict(modelnaiv, testingdat)
confusionMatrix(table(prediksi,testingdat))
#prediksi menggunakan data testing
prediksi<-predict(modelnaiv, testingdat)
confusionMatrix(table(prediksi,testingdat$V7))
install.packages("e1071")
#prediksi menggunakan data testing
prediksi<-predict(modelnaiv, testingdat)
confusionMatrix(table(prediksi,testingdat$V7))
